meta:
  job_templates:
    patroni: (( param "please provide templates for cells" ))

releases:
- name: dingo-postgresql
  version: latest
- name: simple-remote-syslog
  version: latest

jobs:
  - name: cell_z1
    instances: 1
    templates: (( grab meta.job_templates.patroni ))
    resource_pool: cell_z1
    networks: [{name: patroni1}]
    persistent_disk: 10240
    properties:
      zone: z1
  - name: cell_z2
    instances: 1
    templates: (( grab meta.job_templates.patroni ))
    resource_pool: cell_z2
    networks: [{name: patroni2}]
    persistent_disk: 10240
    properties:
      zone: z2
  - name: router
    instances: 1
    templates:
      - {name: remote-syslog, release: simple-remote-syslog}
      - {name: broker, release: dingo-postgresql}
      - {name: router, release: dingo-postgresql}
    resource_pool: router_z1
    networks: [{name: router1}]
    properties:
      servicebroker:
        machines: [127.0.0.1]
        port: 8889 # internally binding
        public_port: 8888 # exposed on haproxy
        router:
          hostname: (( param "please provide public hostname for routers" ))
        backends:
          machines:
            z1: (( param "please provide array of z1 service broker hostnames/ips" ))
            z2: (( param "please provide array of z2 service broker hostnames/ips" ))
  - name: sanity-test
    instances: 1
    lifecycle: errand
    templates: [{name: sanity-test, release: dingo-postgresql}]
    resource_pool: router_z1
    networks: [{name: router1}]
    properties:
      servicebroker:
        port: 8889 # FIXME: since haproxy isn't always running
  - name: disaster-recovery
    instances: 1
    lifecycle: errand
    templates: [{name: disaster-recovery, release: dingo-postgresql}]
    resource_pool: router_z1
    networks: [{name: patroni1}]

resource_pools:
  - name: cell_z1
    stemcell: (( grab meta.stemcell ))
    cloud_properties: (( param "please provide cloud_properties"))
    network: patroni1
  - name: cell_z2
    stemcell: (( grab meta.stemcell ))
    cloud_properties: (( param "please provide cloud_properties"))
    network: patroni2
  - name: router_z1
    stemcell: (( grab meta.stemcell ))
    cloud_properties: (( param "please provide cloud_properties"))
    network: router1

networks:
- name: patroni1
- name: patroni2
- name: router1

properties:
  servicebroker:
    port: 8888
    username: starkandwayne
    password: starkandwayne
  etcd:
    machines: (( param "please provide array of etcd hostnames" ))
