---
meta:
  docker_image:
    image: "dingotiles/dingo-postgresql95"
    tag: "edge"

  broker:
    services:
      - id: 'beb5973c-e1b2-11e5-a736-c7c0b526363d'
        name: 'postgresql95'
        description: 'Solo instance of PostgreSQL 9.5'
        bindable: true
        tags:
          - 'postgresql95'
          - 'postgresql'
          - 'syslog'
        metadata:
          displayName: 'postgresql 9.5'
          longDescription: 'Solo instance of PostgreSQL 9.5'
          providerDisplayName: 'Dingo Tiles'
          documentationUrl: 'https://pg.dingotiles.com'
          supportUrl: 'https://slack.dingotiles.com'
        plans:
          - id: 'b96d0936-e423-11e5-accb-93d374e93368'
            name: 'solo'
            description: 'Solo instance of PostgreSQL with continuous backups'
            free: true
            metadata:
              displayName: 'Solo'
            container:
              backend: 'docker'
              image: (( grab meta.docker_image.image ))
              tag: "(( grab meta.docker_image.tag ))"
              persistent_volumes:
                - '/data'
              environment:
                - (( concat "ETCD_HOST_PORT=" meta.etcd.host ":4001" ))
                - (( concat "AWS_ACCESS_KEY_ID=" meta.backups.aws_access_key ))
                - (( concat "AWS_SECRET_ACCESS_KEY=" meta.backups.aws_secret_key ))
                - (( concat "WAL_S3_BUCKET=" meta.backups.backups_bucket ))
                - (( concat "WALE_S3_ENDPOINT=https+path://" meta.backups.s3_endpoint ))
                - "WALE_ENV_DIR=/data/wal-e/env"
                - "WALE_BACKUP_THRESHOLD_PERCENTAGE=30"
                - "WALE_BACKUP_THRESHOLD_MEGABYTES=10240"

jobs:
- name: router
  properties:
    backups:
      clusterdata:
        aws_access_key_id: (( grab meta.backups.aws_access_key ))
        aws_secret_access_key: (( grab meta.backups.aws_secret_key ))
        bucket_name: (( grab meta.backups.clusterdata_bucket ))
        region: (( grab meta.backups.region ))
- name: sanity-test
  properties:
    backups:
      backend: s3
      s3:
        aws_access_key: (( grab meta.backups.aws_access_key ))
        aws_secret_key: (( grab meta.backups.aws_secret_key ))
        s3_bucket: (( grab meta.backups.backups_bucket ))
        s3_endpoint: (( grab meta.backups.s3_endpoint ))
