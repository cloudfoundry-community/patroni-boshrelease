#!/bin/bash

infrastructure=$1; shift
docker_image=$1; shift
set -e

template_prefix="dingo-postgresql"
STEMCELL_OS=${STEMCELL_OS:-ubuntu}

if [[ "$(which spruce)X" == "X" ]]; then
  echo "Please install spruce, the replacement for spiff"
  echo "See https://github.com/geofffranks/spruce/releases"
  exit 1
fi

usage() {
  echo "usage: ./make_manifest <aws|warden> <embedded|upstream>"
  exit 1
}

if [ "$infrastructure" != "aws" ] && \
    [ "$infrastructure" != "warden" ] ; then
  usage
fi
if [ "$docker_image" != "embedded" ] && [ "$docker_image" != "upstream" ] ; then
  usage
fi

if [[ "${DEMO}X" == "X" ]]; then
  BOSH_STATUS=$(bosh status)
  DIRECTOR_UUID=$(echo "$BOSH_STATUS" | grep UUID | awk '{print $2}')
  DIRECTOR_CPI=$(echo "$BOSH_STATUS" | grep CPI | awk '{print $2}' | sed -e 's/_cpi//')
  DIRECTOR_NAME=$(echo "$BOSH_STATUS" | grep Name | sed 's/.*Name *//')
  DEPLOYMENT_NAME=${DEPLOYMENT_NAME:-$template_prefix-$infrastructure-$docker_image}
else
  DIRECTOR_UUID=xxxxxxx-6076-11e5-8e69-6c4008a663f0
  DIRECTOR_CPI=aws
  DEPLOYMENT_NAME=${DEPLOYMENT_NAME:-demo}
fi

case "${infrastructure}/${STEMCELL_OS}" in
  (warden/*)       STEMCELL_URL="https://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent" ;;
  (aws/ubuntu)     STEMCELL_URL="https://bosh.io/d/stemcells/bosh-aws-xen-ubuntu-trusty-go_agent" ;;
  (aws/centos)     STEMCELL_URL="https://bosh.io/d/stemcells/bosh-aws-xen-centos-7-go_agent" ;;
  (*)
    fail "Invalid infrastructure or OS specified."
    exit 1
    ;;
esac

if [[ $DIRECTOR_NAME = "Bosh Lite Director" ]]; then
  if [[ $infrastructure != "garden" && $infrastructure != "warden" ]]; then
    echo "Not targeting bosh-lite with garden/warden CPI. Please use 'bosh target' before running this script."
    exit 1
  fi
fi

if [[ $infrastructure = "aws" && ${DIRECTOR_CPI} != "aws" ]]; then
  fail "Not targeting an AWS BOSH. Please make sure you have run 'bosh target' and are targeting an AWS BOSH before running this script."
  exit 1
fi

function latest_uploaded_stemcell {
  echo $(bosh stemcells | grep bosh | grep $STEMCELL_OS | awk -F'|' '{ print $2, $3 }' | sort -nr -k2 | head -n1 | awk '{ print $1 }')
}

STEMCELL=${STEMCELL:-$(latest_uploaded_stemcell)}
if [[ -z ${STEMCELL} ]]; then
  echo
  echo "Uploading latest $DIRECTOR_CPI/$STEMCELL_OS stemcell..."
  echo " (from ${STEMCELL_URL})"
  bosh upload stemcell $STEMCELL_URL
fi
STEMCELL=${STEMCELL:-$(latest_uploaded_stemcell)}

templates=$(dirname $0)
release=$templates/..
tmpdir=$release/tmp

mkdir -p $tmpdir
cp $templates/env-director-stub.yml $tmpdir/director.yml
cp $templates/env-name-stub.yml $tmpdir/name.yml
cp $templates/manifest-pipeline-inputs-stub.yml $tmpdir/pipeline-inputs.yml
echo $DIRECTOR_NAME $DIRECTOR_CPI $DIRECTOR_UUID $STEMCELL
perl -pi -e "s/PLACEHOLDER-DIRECTOR-UUID/$DIRECTOR_UUID/g" $tmpdir/director.yml
perl -pi -e "s/NAME/$DEPLOYMENT_NAME/g" $tmpdir/name.yml
perl -pi -e "s/STEMCELL/$STEMCELL/g" $tmpdir/pipeline-inputs.yml

spruce merge --prune meta \
  $templates/deployment.yml \
  $templates/jobs.yml \
  $templates/run-broker-image-${docker_image}.yml \
  $templates/infrastructure-${infrastructure}.yml \
  $templates/noop.yml \
  $tmpdir/director.yml \
  $tmpdir/name.yml \
  $tmpdir/pipeline-inputs.yml \
  $* > $tmpdir/$DEPLOYMENT_NAME-manifest.yml

bosh deployment $tmpdir/$DEPLOYMENT_NAME-manifest.yml

bosh status
