---
meta:
  cfcontainersbroker:
    cc_api_uri: (( param "please provide CF api url" ))
    external_host: (( param "please provide the hostname to advertise for the broker" ))
    username: containers
    password: containers
    cookie_secret: 'e7247dae-a252-4393-afa3-2219c1c02efd'
    protocol: https
    ssl_enabled: true
    component_name: postgresql-docker-broker
    max_containers: 20

  job_templates:
    patroni:
    # ship all the logs
    - {name: remote-syslog, release: simple-remote-syslog}
    # run docker daemon
    - {name: docker, release: patroni-docker}
    # run registrator daemon
    - {name: registrator, release: patroni-docker}
    # docker images will be pulled down
    - {name: upstream-images, release: patroni-docker}
    # create uuid for each broker/daemon
    - {name: container-env-vars, release: patroni-docker}
    # run service broker
    - {name: cf-containers-broker, release: patroni-docker}

# longer watch times to allow download of docker images
update:
  canary_watch_time: 30000-300000
  update_watch_time: 30000-300000

properties:
  cf:
    api_url: (( grab meta.cfcontainersbroker.cc_api_uri ))

  registrator:
    backend_uri: (( grab meta.registrator.backend_uri))

  broker:
    name: (( grab meta.cfcontainersbroker.component_name ))
    component_name: (( grab meta.cfcontainersbroker.component_name ))
    protocol: (( grab meta.cfcontainersbroker.protocol ))
    ssl_enabled: (( grab meta.cfcontainersbroker.ssl_enabled ))
    host: (( grab meta.cfcontainersbroker.external_host ))
    port: 80
    username: (( grab meta.cfcontainersbroker.username ))
    password: (( grab meta.cfcontainersbroker.password ))
    cookie_secret: (( grab meta.cfcontainersbroker.cookie_secret ))
    max_containers: (( grab meta.cfcontainersbroker.max_containers ))
    fetch_images: true

    services: &services
      - id: 'beb5973c-e1b2-11e5-a736-c7c0b526363d'
        name: 'postgresql95'
        description: 'Solo instance of PostgreSQL 9.5'
        bindable: true
        tags:
          - 'postgresql95'
          - 'postgresql'
          - 'syslog'
        metadata:
          displayName: 'postgresql 9.5'
          longDescription: 'Solo instance of PostgreSQL 9.5'
          providerDisplayName: 'Dingo Tiles'
          documentationUrl: 'https://pg.dingotiles.com'
          supportUrl: 'https://slack.dingotiles.com'
        plans:
          - id: '1545e30e-6dc3-11e5-826a-6c4008a663f0'
            name: 'solo'
            description: 'Solo instance of PostgreSQL'
            metadata:
              displayName: 'Solo'
            container:
              backend: 'docker'
              image: cfcommunity/postgresql-patroni
              tag: "9.5"
              persistent_volumes:
                - '/data'
              environment:
                - (( concat "ETCD_HOST_PORT=" meta.etcd.host ":4001" ))
      # - id: '0f5c1670-6dc3-11e5-bc08-6c4008a663f0'
      #   name: 'postgresql95'
      #   description: 'High-availability PostgreSQL 9.5 service cluster'
      #   bindable: true
      #   tags:
      #     - 'postgresql95'
      #     - 'postgresql'
      #     - 'syslog'
      #   metadata:
      #     displayName: 'postgresql 9.5'
      #     longDescription: 'High-availablity cluster of PostgreSQL 9.5 running across multiple servers/availability zones'
      #     providerDisplayName: 'Dingo Tiles'
      #     documentationUrl: 'https://pg.dingotiles.com'
      #     supportUrl: 'https://slack.dingotiles.com'
      #   plans:
      #     - id: '1545e30e-6dc3-11e5-826a-6c4008a663f0'
      #       name: 'cluster'
      #       description: 'High-availablity cluster of PostgreSQL'
      #       metadata:
      #         displayName: 'Clustered'
      #       container:
      #         backend: 'docker'
      #         image: cfcommunity/postgresql-patroni
      #         tag: "9.5"
      #         persistent_volumes:
      #           - '/data'
      #         environment:
      #           - (( concat "ETCD_HOST_PORT=" meta.etcd.host ":4001" ))
  servicebroker:
    services: *services
