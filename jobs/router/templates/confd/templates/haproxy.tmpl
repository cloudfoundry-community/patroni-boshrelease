global
	maxconn 100
<% if_p('haproxy.syslog') do |endpoint| %>
	log <%= endpoint %> local0
	log-send-hostname
<% end %>

defaults
	log	global
	mode	tcp
	option tcplog
	retries 2
	timeout client 30m
	timeout connect 4s
	timeout server 30m
	timeout check 5s

<%
	servicebroker_machines = nil
	if_p("servicebroker.machines") do |machines|
		servicebroker_machines = machines
	end
	unless servicebroker_machines
		servicebroker_machines = link("servicebroker").instances.map(&:address)
	end
%>

listen servicebroker
	bind :<%= p("servicebroker.public_port") %>
<% servicebroker_machines.each_with_index do |broker, i| %>
	server leader_<%= i %> <%= broker %>:<%= p("servicebroker.port") %>
<% end %>
{{range $name := ls "/routing/allocation"}} {{with getvs (printf "/service/%s/members/*" $name)}}
frontend {{$name}}
	bind *:{{getv (printf "/routing/allocation/%s" $name)}}
{{range $index, $member := .}}
	use_backend {{$name}}_master if { srv_is_up({{$name}}_master/member_{{$index}}) }{{end}}
	default_backend {{$name}}_replicas {{/* Fall back to read only connection if a replica is up */}}

backend {{$name}}_master
	option httpchk OPTIONS /master
{{range $index, $member := . }} {{/* extract ip:port from postgres://name:pw@host:port/postgres */}}
{{with json $member}}	server member_{{$index}} {{base (replace (index (split .conn_url "/") 2) "@" "/" -1)}} check port {{index (split (index (split .api_url "/") 2) ":") 1}}{{end}}{{end}}

backend {{$name}}_replicas
	option httpchk OPTIONS /replica
{{range $index, $member := . }} {{/* extract ip:port from postgres://name:pw@host:port/postgres */}}
{{with json $member}}	server member_{{$index}} {{base (replace (index (split .conn_url "/") 2) "@" "/" -1)}} check port {{index (split (index (split .api_url "/") 2) ":") 1}}{{end}}{{end}}

{{end}} {{end}}
