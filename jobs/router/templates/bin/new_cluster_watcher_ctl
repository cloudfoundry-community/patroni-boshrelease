#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables
set -x # print commands

source /var/vcap/jobs/router/helpers/ctl_setup.sh 'router' 'new_cluster_watcher'

case $1 in

  start)
    pid_guard $PIDFILE 'new_cluster_watcher'

    # store pid in $PIDFILE
    echo $$ > $PIDFILE

    export ETCD_CLUSTER=${ETCD_CLUSTER:-10.244.4.2:4001}
    event=$(curl -sL "${ETCD_CLUSTER}/v2/keys/service/?wait=true&recursive=true")

    pathRegexp="\/service\/([^\/]+)\/"

    function allocate_port() {
      name=$1
      echo "new cluster discovered by router: $name"

      port=$(curl -sL "${ETCD_CLUSTER}/v2/keys/routing/nextport" | jq -r .node.value)
      if [[ "${port}" == "null" ]]; then
        port=30000
      fi
      echo "assigning port $port"
      curl -sL "${ETCD_CLUSTER}/v2/keys/routing/allocation/${name}" -X PUT -d value=${port}

      nextPort=$((port+1))
      curl -sL "${ETCD_CLUSTER}/v2/keys/routing/nextport" -X PUT -d value=${nextPort}
    }

    while :
    do
      eventIndex=$(echo $event | jq -r ".node.modifiedIndex")
      nextEventIndex=$((eventIndex+1))
      if [[ "$(echo $event | jq -r .action)" == "create" ]]; then
        pathKey=$(echo $event | jq -r .node.key) # /service/cf-123/initialize
        [[ $pathKey =~ $pathRegexp ]]
        name="${BASH_REMATCH[1]}"
        allocate_port $name
      fi
      event=$(curl -sL "http://${ETCD_CLUSTER}/v2/keys/service/?wait=true&recursive=true&waitIndex=${nextEventIndex}")
    done
    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: new_cluster_watcher_ctl {start|stop}"

    ;;

esac
exit 0
