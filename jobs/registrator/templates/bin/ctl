#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/registrator/helpers/ctl_setup.sh 'registrator'

export PORT=${PORT:-5000}
export LANG=en_US.UTF-8

case $1 in

  start)
    pid_guard $PIDFILE $JOB_NAME

    image_file=/var/vcap/packages/cfcommunity_registrator_latest_image/*.tgz
    docker_sock=/var/vcap/sys/run/docker/docker.sock

    docker --host unix://${docker_sock} \
      load -i ${image_file} \
      >>${LOG_DIR}/${output_label}.stdout.log \
      2>>${LOG_DIR}/${output_label}.stderr.log

    # REGISTRATOR_IMAGE=gliderlabs/registrator:latest
    REGISTRATOR_IMAGE="cfcommunity/registrator:latest /bin/registrator" #Dockerfile.dev
    container_name=registrator

    # Stop and remove previously Docker Container if exists
    chpst -u ${DOCKER_USER}:${DOCKER_GROUP} docker -H unix://${docker_sock} stop ${container_name} || true
    chpst -u ${DOCKER_USER}:${DOCKER_GROUP} docker -H unix://${docker_sock} rm ${container_name} || true

    # wait for hostname to be updated
    chpst -u ${DOCKER_USER}:${DOCKER_GROUP} docker \
      --host unix://${docker_sock} \
        run -d \
          --name=${container_name} \
          --net=host \
          --volume=${docker_sock}:/tmp/docker.sock \
          ${REGISTRATOR_IMAGE} -hostname ${DOCKER_HOSTNAME} -ip ${DOCKER_HOSTIP} ${REGISTRATOR_BACKEND_URI} \
            >>${LOG_DIR}/${output_label}.stdout.log \
            2>>${LOG_DIR}/${output_label}.stderr.log

    # Grab Container process pid
    pid_process=$(chpst -u ${DOCKER_USER}:${DOCKER_GROUP} docker -H unix://${docker_sock} inspect -f '{{ .State.Pid }}' ${container_name})
    echo $pid_process > ${PIDFILE}

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;
  *)
    echo "Usage: registrator_ctl {start|stop}"

    ;;

esac
exit 0
