production:
  log_path: '/var/vcap/sys/log/cf-containers-broker/cf-containers-broker.log'
  auth_username: '<%= p('broker.username') %>'
  auth_password: '<%= p('broker.password') %>'
  cookie_secret: <%= p('broker.cookie_secret') %>
  session_expiry: <%= p('broker.session_expiry') %>

  cc_api_uri: <%= p('cf.api_url') %>
  <%
    def openstruct_to_hash(os)
      os.marshal_dump.map do |key, element|
        element.is_a?(OpenStruct) ? { key => openstruct_to_hash(element) } : { key => element }
      end.reduce(&:merge)
    end

    networks = openstruct_to_hash(spec.networks)
    external_ip = networks.values.find { |net| net.has_key?(:default) }[:ip]
   %>
  external_ip: <%= external_ip %>
  external_host: <%= p('broker.host') %>
  external_port: <%= p('broker.unicorn.port') %>
  component_name: <%= p('broker.component_name') %>

  ssl_enabled: <%= p('broker.ssl_enabled') %>
  skip_ssl_validation: <%= p('broker.skip_ssl_validation') %>

  host_directory: /var/vcap/store/cf-containers-broker/
  max_containers: <%= p('broker.max_containers') %>
  allocate_docker_host_ports: <%= p('broker.allocate_docker_host_ports') %>

  message_bus_servers:
  <% p('nats.machines').each do |ip| %>
    - nats://<%= p('nats.user') %>:<%= p('nats.password') %>@<%= ip %>:<%= p('nats.port') %>
  <% end %>

  services: <%= JSON.pretty_generate(p('broker.services')) %>
