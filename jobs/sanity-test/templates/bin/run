#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/sanity-test/helpers/ctl_setup.sh 'sanity-test'

EXITSTATUS=0

BROKER_URI=http://<%= p("servicebroker.username") %>:<%= p("servicebroker.password") %>@<%= p("servicebroker.machines").first %>:<%= p("servicebroker.port") %>

echo Catalog
curl -sf ${BROKER_URI}/v2/catalog | jq .

service_id=$(curl -sf ${BROKER_URI}/v2/catalog | jq -r ".services[0].id")
echo service_id $service_id
plan_ids=$(curl -sf ${BROKER_URI}/v2/catalog | jq -r ".services[0].plans[].id")
echo plan_ids $plan_ids

instance_id=TESTID-$(date +"%s")
binding_id=BINDINGID-$(date +"%s")
echo instance_id ${instance_id}

for plan_id in ${plan_ids[@]}; do
  echo creating service instance
  curl -f ${BROKER_URI}/v2/service_instances/${instance_id} -XPUT -d "{\"service_id\": \"${service_id}\", \"plan_id\": \"${plan_id}\"}"

  echo creating service binding
  credentials=$(curl -sf ${BROKER_URI}/v2/service_instances/${instance_id}/service_bindings/${binding_id} -XPUT -d "{\"service_id\": \"${service_id}\", \"plan_id\": \"${plan_id}\"}")
  echo credentials $credentials
  uri=$(echo $credentials | jq -r ".credentials.uri")
  echo uri $uri

  # 60 seconds to allow confd/haproxy restart to kick in
  set +e
  error_code=x
  i="0"
  while [[ $i -lt 60 && "${error_code}" != "0" ]]; do
    i=$[$i+1]
    sleep 1
    echo attempt $i
    pgbench -i $uri
    error_code=$?
  done
  set -e # exit immediately if a simple command exits with a non-zero status
  pgbench $uri

  nodes=3
  echo updating service instance to $nodes nodes
  curl -f ${BROKER_URI}/v2/service_instances/${instance_id} -XPATCH -d "{\"service_id\": \"${service_id}\", \"plan_id\": \"${plan_id}\", \"parameters\": {\"node-count\": $nodes}}"

  echo deleting service binding
  curl -f ${BROKER_URI}/v2/service_instances/${instance_id}/service_bindings/${binding_id}\?plan_id=${plan_id}\&service_id=${service_id} -XDELETE

  echo deleting service instance
  curl -f ${BROKER_URI}/v2/service_instances/${instance_id}\?plan_id=${plan_id}\&service_id=${service_id} -XDELETE
done

echo "Errand sanity-test is complete; exit status $EXITSTATUS"
exit $EXITSTATUS
