#!/bin/bash

set -e -o pipefail
set -u

service_id=$1
plan_id=$2
instance_id=$3
binding_id=$4
uri=$5

indent() {
  c="s/^/test-failure-recovery> /"
  case $(uname) in
    Darwin) sed -l "$c";; # mac/bsd sed: -l buffers on line boundaries
    *)      sed -u "$c";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
  esac
}

script() {
  echo "*"
  echo "*"
  echo "* Testing database restoration"
  echo "*"
  echo "*"

for ((n=0;n<12;n++)); do
  set -x
  backups_lines=$(curl -sf ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value | wc -l)
  set +x
  if [[ $backups_lines -lt 2 ]]; then
    echo "Waiting for first backups to be written $n"
    sleep 10
  else
    break
  fi
done
set -x

if [[ $backups_lines -lt 2 ]]; then
  echo "No backups are being written"
  exit 1
fi

echo Display wal-e backup status
curl -s ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value

psql ${uri} -c 'DROP TABLE IF EXISTS sanitytest;'
psql ${uri} -c 'CREATE TABLE sanitytest(value text);'
psql ${uri} -c "INSERT INTO sanitytest VALUES ('test-failure-recovery');"

psql ${uri} -c "select * from sanitytest;"

echo Deleting service instance
curl -sf ${BROKER_URI}/v2/service_instances/${instance_id}\?plan_id=${plan_id}\&service_id=${service_id} -XDELETE

echo Recreating service instance
curl -sf ${BROKER_URI}/v2/service_instances/${instance_id} -XPUT -d '{}'

set +x
echo Waiting for the cluster to recover
created_ok=false
for ((n=0;n<30;n++)); do
  last_operation=$(curl -s ${BROKER_URI}/v2/service_instances/${instance_id}/last_operation)
  echo $last_operation
  if echo ${last_operation} | grep 'succeeded' > /dev/null; then
    echo final successful state of cluster
    curl ${BROKER_URI}/admin/service_instances/${instance_id} | jq .
    created_ok=true
    break
  fi
  sleep 10
done

if [[ "${created_ok}" == "false" ]]; then
  echo "Couldn't recreate service instance with 300s"
  exit 1
fi

set +x
echo Display wal-e backup status
for ((n=0;n<30;n++)); do
  if [[ "$(curl -s ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value)" != "null" ]]; then
    break
  fi
  printf "."
  sleep 10
done
if [[ "$(curl -s ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value)" == "null" ]]; then
  echo "No backups available for ${instance_id} after recovery after 300s"
  exit 1
fi
curl -s ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value


echo "Waiting for haproxy to update and database to restore"
set -x

running_ok=false
set +e +o pipefail
for ((n=0;n<6;n++)); do
  if [ $? -eq 0 ]; then
    psql ${uri} -c "SELECT current_database();"
    running_ok=true
    break
  fi
  sleep 10
done
set -e -o pipefail
if [[ "${running_ok}" == "false" ]]; then
  echo "Service instance was not running ok after 60s"
  exit 1
fi

for ((n=0;n<30;n++)); do
  in_recovery=$(psql ${uri} -c "SELECT row_to_json(t1) FROM (SELECT pg_is_in_recovery()) t1;" -t | jq -r .pg_is_in_recovery)
  if [[ "${in_recovery}" == "false" ]]; then
    echo "Database finished recovering"
    break
  fi
  echo "Database still recovering"
  sleep 10
done
if [[ "${in_recovery}" != "false" ]]; then
  echo "Database failed to recover within 300s"
  exit 1
fi

psql ${uri} -c "SELECT * from sanitytest;"

psql ${uri} -c 'SELECT * FROM sanitytest;' | grep 'test-failure-recovery' || {
  echo Database did not restore
  exit 1
}

echo Database restored successfully!
}

script 2>&1 | indent
