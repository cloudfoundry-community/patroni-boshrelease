#!/bin/bash

set -e
set -u
set -x

service_id=$1
plan_id=$2
instance_id=$3
binding_id=$4
uri=$5

indent() {
  c="s/^/test-failure-recovery> /"
  case $(uname) in
    Darwin) sed -l "$c";; # mac/bsd sed: -l buffers on line boundaries
    *)      sed -u "$c";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
  esac
}

script() {

echo Testing database restoration
set +x
for ((n=0;n<120;n++)); do
  set -x
  backups_lines=$(curl -sf ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value | wc -l)
  set +x
  if [[ $backups_lines -lt 2 ]]; then
    echo "Waiting for first backups to be written $n"
    sleep 1
  else
    break
  fi
done
set -x

if [[ $backups_lines -lt 2 ]]; then
  echo "No backups are being written"
  exit 1
fi

echo Display wal-e backup status
curl -s ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value

psql ${uri} -c 'DROP TABLE IF EXISTS sanitytest;'
psql ${uri} -c 'CREATE TABLE sanitytest(value text);'
psql ${uri} -c "INSERT INTO sanitytest VALUES ('test-failure-recovery');"

psql ${uri} -c "select * from sanitytest;"

echo Deleting service instance
curl -sf ${BROKER_URI}/v2/service_instances/${instance_id}\?plan_id=${plan_id}\&service_id=${service_id} -XDELETE

echo Display wal-e backup status
curl -s ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value

echo Recreating service instance
curl -sf ${BROKER_URI}/v2/service_instances/${instance_id} -XPUT -d '{}'

echo waiting for the cluster to recover
set +x
sleep 30

echo Display wal-e backup status
curl -s ${ETCD}/v2/keys/service/${instance_id}/wale-backup-list | jq -r .node.value

for ((n=0;n<120;n++)); do
  set -x
  last_operation=$(curl ${BROKER_URI}/v2/service_instances/${instance_id}/last_operation)
  set +x
  if echo ${last_operation} | grep 'succeeded' > /dev/null; then
    set -x
    break
  fi
  sleep 1
done

echo "Waiting for haproxy to update and database to restore"
sleep 31

psql ${uri} -c "SELECT * from sanitytest;"
psql ${uri} -c 'SELECT * FROM sanitytest;' | grep 'test-failure-recovery' || {
  echo Database did not restore
  exit 1
}

echo Database restored successfully!
}

script 2>&1 indent
