#!/bin/bash

set -e
set -u
set -x

echo Testing replication

instance_id=$1

leader_id=$(curl -s ${ETCD}/v2/keys/service/${instance_id}/leader | jq -r '.node.value')
leader_con=$(curl -s ${ETCD}/v2/keys/service/${instance_id}/members/${leader_id} | jq -r '.node.value' | jq -r '.conn_url')

set +x
replicators_found=''
for ((n=0;n<30;n++)); do
  set -x
  replication_table=$(psql ${leader_con} -c 'select * from pg_stat_replication;')
  set +x
  if echo ${replication_table} | grep '0 rows'; then
    replicators_found='false'
    sleep 1
  else
    replicators_found='true'
    break
  fi
done
set -x

if [[ "${replicators_found}" != 'true' ]]; then
  echo No replicators registered with leader
  exit 1
fi

echo Replicators have registered with leader

psql ${leader_con} -c 'DROP TABLE IF EXISTS sanitytest'
psql ${leader_con} -c 'CREATE TABLE sanitytest(value text);'
psql ${leader_con} -c "INSERT INTO sanitytest VALUES ('replication-test');"

curl -s ${ETCD}/v2/keys/service/${instance_id}/members | \
  jq -r '.node.nodes[].value' | \
  while read info; do
  con_url=$(echo ${info} | jq -r '.conn_url')
  replicating=''
  set +x
  for ((n=0;n<20;n++)); do
    set -x
    sanity_table=$(psql ${con_url} -c "SELECT * FROM sanitytest")
    set +x
    if echo ${sanity_table} | grep 'replication-test'; then
      replicating='false'
      sleep 1
    else
      replicating='true'
      break
    fi
  done
  set -x
  if [[ "${replicating}" != 'true' ]]; then
    echo Cluster is not replicating to connection $con_url
    exit 1
  fi
done

echo Replication successfull!
