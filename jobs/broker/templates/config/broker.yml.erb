---
broker:
  username: <%= p("servicebroker.username") %>
  password: <%= p("servicebroker.password") %>
  port: <%= p("servicebroker.port") %>
  router_host: <%= p("servicebroker.router.hostname") %>

cells:
<% p("servicebroker.backends.machines").each do |az, machines| %>
  <% machines.each do |machine| %>
- guid: <%= machine %>
  availability_zone: <%= az %>
  uri: <%= machine %>
  username: "<%= p('servicebroker.backends.username') %>"
  password: "<%= p('servicebroker.backends.password') %>"
  <% end %>
<% end %>

etcd:
  machines: <%= p("etcd.machines").map {|h| "http://#{h}:4001"} %>

archives:
<% if_p("backups.database_storage.aws_access_key_id") do %>
  method: s3
  s3:
    aws_access_key_id: <%= p("backups.database_storage.aws_access_key_id") %>
    aws_secret_access_id: <%= p("backups.database_storage.aws_secret_access_key") %>
    s3_bucket: <%= p("backups.database_storage.bucket_name") %>
    aws_region: <%= p("backups.database_storage.region") %>
<% end %>

<% if_p("backups.clusterdata.aws_access_key_id") do |aws_access_key_id| %>
callbacks:
  clusterdata_backup: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_backup.sh}
  clusterdata_restore: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_restore.sh}
  clusterdata_find_by_name: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_find_by_name.sh}
  backups_copy: {cmd: /var/vcap/jobs/broker/bin/backups_copy.sh}
<% end %>

<% if_p("backups.database_storage.bucket_name") do |bucket_name| %>
backups:
  base_uri: s3://<%= bucket_name %>/backups
<% end %>

<% if_p("cf.api_url", "cf.username", "cf.password") do |api_url, username, password| %>
cf:
  api_url: <%= api_url %>
  username: <%= username %>
  password: <%= password %>
  skip_ssl_validation: <%= p("cf.skip_ssl_validation") %>
<% end %>

catalog:
  services: <%= JSON.pretty_generate(p('servicebroker.services')) %>
