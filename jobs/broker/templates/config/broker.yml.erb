---
<%
  bind_host = nil
  if_p("servicebroker.router.hostname") do |router_hostname|
    bind_host = router_hostname
  end
  require 'json'

  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    unless network
      _, network = networks.first
    end
    unless network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
  bind_host ||= discover_external_ip
-%>
broker:
  username: <%= p("servicebroker.username") %>
  password: <%= p("servicebroker.password") %>
  port: <%= p("servicebroker.port") %>
  bind_host: <%= bind_host %>

<%
  backends = []
  if_p("servicebroker.backends.machines") do |az_and_machines|
    az, machines = az_and_machines
    machines.each do |machine|
      backends << {
        "guid": machine,
        "az": az,
        "uri": machine,
        "username": p('servicebroker.backends.username'),
        "password": p('servicebroker.backends.password'),
        "property-input": "old-style",
      }
    end
  end
  if backends.size == 0
    cells = link("cf-containers-broker")
    cells.instances.each do |instance|
      backends << {
        "guid": instance.address,
        "az": instance.az,
        "uri": instance.address,
        "username": cells.p('broker.username'),
        "password": cells.p('broker.password'),
        "property-input": "links",
      }
    end
  end
-%>
cells:
<% backends.each do |backend| -%>
- guid: <%= backend[:guid] %>
  availability_zone: <%= backend[:az] %>
  uri: <%= backend[:uri] %>
  username: <%= backend[:username] %>
  password: "<%= backend[:password] %>"
<% end -%>

<%
  etcd_endpoints = nil
  if_p("etcd.machines") do |etcd_machines|
    etcd_endpoints = etcd_machines.map do |instance|
      "http://#{instance}:4001/"
    end
  end
  etcd_endpoints ||= link("etcd").instances.map do |instance|
    "http://#{instance.address}:4001/"
  end
-%>
etcd:
  machines: <%= etcd_endpoints.to_json %>

<% if_p("backups.clusterdata.aws_access_key_id") do |aws_access_key_id| %>
callbacks:
  clusterdata_backup: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_backup.sh}
  clusterdata_restore: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_restore.sh}
  clusterdata_find_by_name: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_find_by_name.sh}
  backups_copy: {cmd: /var/vcap/jobs/broker/bin/backups_copy.sh}
<% end %>

<% if_p("backups.database_storage.bucket_name") do |bucket_name| %>
backups:
  base_uri: s3://<%= bucket_name %>/backups
<% end %>

<% if_p("cf.api_url", "cf.username", "cf.password") do |api_url, username, password| %>
cf:
  api_url: <%= api_url %>
  username: <%= username %>
  password: <%= password %>
  skip_ssl_validation: <%= p("cf.skip_ssl_validation") %>
<% end %>

<%
  services = nil
  if_p('servicebroker.services') do |s|
    services = s
  end
  services ||= link("cf-containers-broker").p('broker.services')
-%>
catalog:
  services: <%= JSON.pretty_generate(services) %>
