#!/bin/bash

set -e
DPG_DIR=~/.dpg

main() {
  load_current
  case "${1:-help}" in
    target)
      shift
      cmd_target $@
      ;;
    access)
      shift
      cmd_access $@
      ;;
    status)
      shift
      cmd_status $@
      ;;
    create)
      shift
      cmd_create $@
      ;;
    delete)
      shift
      cmd_delete $@
      ;;
    purge)
      shift
      cmd_purge $@
      ;;
    demote-cell)
      shift
      cmd_demote_cell $@
      ;;
    ls)
      shift
      cmd_ls $@
      ;;
    cells)
      shift
      cmd_cells $@
      ;;
    raw)
      shift
      cmd_raw $@
      ;;
    help)
      cmd_help
      ;;
    *)
      echo "Unknown command ${1}" >&2
      cmd_help
      ;;
  esac
}

load_current() {
  if [[ ! -d ${DPG_DIR} ]]; then
    mkdir -p ${DPG_DIR}
  fi

  if [[ -f ${DPG_DIR}/current ]]; then
    current_target=$(cat ${DPG_DIR}/current)
    export TARGET_DIR=${DPG_DIR}/${current_target}
    if [[ -f ${TARGET_DIR}/etcd_endpoint ]]; then
      export ETCD_ENDPOINT=$(cat ${TARGET_DIR}/etcd_endpoint)
    fi
    if [[ -f ${TARGET_DIR}/broker_endpoint ]]; then
      export BROKER_ENDPOINT=$(cat ${TARGET_DIR}/broker_endpoint)
    fi
    if [[ -f ${TARGET_DIR}/broker_username ]]; then
      export BROKER_USERNAME=$(cat ${TARGET_DIR}/broker_username)
    fi
    if [[ -f ${TARGET_DIR}/broker_password ]]; then
      export BROKER_PASSWORD=$(cat ${TARGET_DIR}/broker_password)
    fi
    if [[ -f ${TARGET_DIR}/cf_endpoint ]]; then
      export CF_ENDPOINT=$(cat ${TARGET_DIR}/cf_endpoint)
    fi
    if [[ -f ${TARGET_DIR}/cf_username ]]; then
      export CF_USERNAME=$(cat ${TARGET_DIR}/cf_username)
    fi
  fi
}

cmd_target() {
	local target_name=${1}
  if [[ -z ${target_name} ]]; then
    echo "Target set to: '$(cat ${DPG_DIR}/current)'"
    echo
    echo ETCD_ENDPOINT=${ETCD_ENDPOINT}
    echo BROKER_ENDPOINT=${BROKER_ENDPOINT}
    echo CF_ENDPOINT=${CF_ENDPOINT}
    return
  fi

  echo ${target_name} > ${DPG_DIR}/current
  shift
  target_dir="${DPG_DIR}/${target_name}"
  while [[ $# -gt 0 ]]
  do
    key="${1}"

    case ${key} in
      -k|--skip-ssl-validation)
        skip_ssl_validation='--skip-ssl-validation'
        shift # past argument
        ;;
      --init)
        rm -rf ${target_dir}/*
        shift # past argument
        ;;
      *)
        # unknown option
        ;;
    esac
  done
  if [[ ! -d ${target_dir} ]]; then
    mkdir -p ${target_dir}
  fi

  if [[ -f "${target_dir}/etcd_endpoint" ]]; then
    etcd_endpoint=$(cat ${target_dir}/etcd_endpoint)
  fi
  if [[ -z ${etcd_endpoint} ]]; then
    read -p 'ETCD endpoint> ' etcd_endpoint
    echo ${etcd_endpoint} > ${target_dir}/etcd_endpoint
  fi

  if [[ -f "${target_dir}/broker_endpoint" ]]; then
    broker_endpoint=$(cat ${target_dir}/broker_endpoint)
  fi
  if [[ -z ${broker_endpoint} ]]; then
    read -p 'BROKER endpoint> ' broker_endpoint
    echo ${broker_endpoint} > ${target_dir}/broker_endpoint
  fi

  if [[ -f "${target_dir}/broker_username" ]]; then
    broker_username=$(cat ${target_dir}/broker_username)
  fi
  if [[ -z ${broker_username} ]]; then
    read -p 'BROKER username> ' broker_username
    echo ${broker_username} > ${target_dir}/broker_username
  fi

  if [[ -f "${target_dir}/broker_password" ]]; then
    broker_password=$(cat ${target_dir}/broker_password)
  fi
  if [[ -z ${broker_password} ]]; then
    read -p 'BROKER password> ' broker_password
    echo ${broker_password} > ${target_dir}/broker_password
  fi

  if [[ -f "${target_dir}/cf_endpoint" ]]; then
    endpoint=$(cat ${target_dir}/cf_endpoint)
  fi
  if [[ -z ${endpoint} ]]; then
    read -p 'CF endpoint> ' endpoint
    echo ${endpoint} > ${target_dir}/cf_endpoint
  fi

  if [[ -f "${target_dir}/cf_username" ]]; then
    username=$(cat ${target_dir}/cf_username)
  fi
  if [[ -z ${username} ]]; then
    read -p 'CF username> ' username
    echo ${username} > ${target_dir}/cf_username
  fi

  read -sp 'CF password> ' password
  echo
  if [[ ! -z "${password}" ]]; then
    cf login -a ${endpoint} -u ${username} -p ${password} ${skip_ssl_validation}
  fi
}

cmd_ls() {
  cf_cache=${TARGET_DIR}/cf_cache
  rm -rf ${cf_cache}
  mkdir -p ${cf_cache}
  if [[ ! -z ${CF_ENDPOINT} ]];then
    cf curl /v2/service_instances > ${cf_cache}/service_instances || touch ${cf_cache}/service_instances
    cf curl /v2/spaces > ${cf_cache}/spaces || touch ${cf_cache}/spaces
    cf curl /v2/organizations > ${cf_cache}/organizations || touch ${cf_cache}/organizations
  fi

  etcd_cache=${TARGET_DIR}/etcd_cache
  if [[ ! -z ${ETCD_ENDPOINT} ]]; then
    curl -s ${ETCD_ENDPOINT}/v2/keys/service\?recursive=true > ${etcd_cache}
  else
    echo "Need ETCD_ENDPOINT for 'dpg ls'"
  fi

  (
    echo cluster-id members leader cf-name cf-org cf-space
    if [[ ! -z ${ETCD_ENDPOINT} ]] && cat ${etcd_cache} | jq '.node.nodes[]' >/dev/null 2>&1 ; then
      cat ${etcd_cache} | jq -r '.node.nodes[].key' \
        | while read cluster_path; do
        cluster_id=$(basename ${cluster_path})

        members_path=${cluster_path}/members
        members=$(cat ${etcd_cache} | jq --arg members ${members_path} '.node.nodes[].nodes[] | select(contains({key: $members})).nodes[].key' 2>/dev/null | wc -l)

        leader_path=${cluster_path}/leader
        leader=$(cat ${etcd_cache} | jq -r --arg leader ${leader_path} '.node.nodes[].nodes[] | select(contains({key: $leader})).value' 2>/dev/null)
        if [[ -z ${leader} ]]; then
          leader='<none>'
        fi

        if [[ -f ${cf_cache}/service_instances ]]; then
          cf_name=$(cat ${cf_cache}/service_instances | jq -r --arg id ${cluster_id} '.resources[] | select(contains({metadata: {guid: $id}})).entity.name' 2>/dev/null || echo '')
        fi
        if [[ -z ${cf_name} ]]; then
          cf_name='<none>'
        fi

        state_path=${cluster_path}/state
        state=$(cat ${etcd_cache} | jq -r --arg state ${state_path} '.node.nodes[].nodes[] | select(contains({key: $state})).value' 2>/dev/null)
        if [[ ! -z ${state} ]]; then
          if [[ ${cf_name} == '<none>' ]]; then
            cf_name='<UNKNOWN>'
          fi

          cf_org_id=$(echo ${state} | jq -r '.organization_guid')
          cf_org_name='<unknown>'
          if [[ ! -z ${cf_org_id} ]]; then
            cf_org_name=$(cat ${cf_cache}/organizations | jq -r --arg id ${cf_org_id} '.resources[] | select(contains({metadata: {guid: $id}})).entity.name')
          fi

          cf_space_name='<unknown>'
          cf_space_id=$(echo ${state} | jq -r '.space_guid')
          if [[ ! -z ${cf_space_id} ]]; then
            cf_space_name=$(cat ${cf_cache}/spaces | jq -r --arg id ${cf_space_id} '.resources[] | select(contains({metadata: {guid: $id}})).entity.name')
          fi
        else
          cf_org_name=''
          cf_space_name=''
        fi

        echo ${cluster_id} ${initialized} ${members} ${leader} ${cf_name} ${cf_org_name} ${cf_space_name}
      done
    fi
  ) | column -t
}

cmd_access() {
  cf curl /v2/organizations \
    | jq -r '.resources[].metadata.url' \
    | while read org_url; do
      org_data=$(cf curl ${org_url})
      org=$(echo ${org_data} | jq -r '.entity.name')
      spaces_url=$(echo ${org_data} | jq -r '.entity.spaces_url')
      cf curl ${spaces_url} \
        | jq -r '.resources[].entity.name' \
        | while read space; do
      cf set-space-role ${CF_USERNAME} ${org} ${space} SpaceManager
      cf set-space-role ${CF_USERNAME} ${org} ${space} SpaceDeveloper
    done
  done
}

cmd_demote_cell() {
  local service_id="beb5973c-e1b2-11e5-a736-c7c0b526363d"
  local plan_id="1545e30e-6dc3-11e5-826a-6c4008a663f0"
  local cell_id=${1}
  echo 'Please provide the broker password'
  read -sp 'BROKER password> ' broker_password
  echo
  curl "${BROKER_USERNAME}:${broker_password}@${BROKER_ENDPOINT}/admin/cells/${cell_id}/demote" -i -XPOST
}

cmd_delete() {
  local service_id="beb5973c-e1b2-11e5-a736-c7c0b526363d"
  local plan_id="1545e30e-6dc3-11e5-826a-6c4008a663f0"
  local instance_id=${1}
  echo "You are about to delete the cluster '${instance_id}'"
  echo "Enter password to confirm"
  read -sp 'BROKER password> ' broker_password
  echo
  curl ${BROKER_USERNAME}:${broker_password}@${BROKER_ENDPOINT}/v2/service_instances/${instance_id}\?plan_id=${plan_id}\&service_id=${service_id} -XDELETE
}

cmd_create() {
  service_id="beb5973c-e1b2-11e5-a736-c7c0b526363d"
  plan_id="1545e30e-6dc3-11e5-826a-6c4008a663f0"
  instance_id=${1}
  echo "You are about to delete the cluster '${instance_id}'"
  echo "Enter password to confirm"
  read -sp 'BROKER password> ' broker_password
  echo
  curl ${BROKER_USERNAME}:${broker_password}@${BROKER_ENDPOINT}/v2/service_instances/${instance_id} \
    -XPUT \
    -d "{\"service_id\": \"${service_id}\", \"plan_id\": \"${plan_id}\"}"
}

cmd_purge() {
  instance_id=${1:?USAGE: dpg purge INSTANCE_ID}
  echo "You are about to purge the cluster '${instance_id}' from ETCD"
  read -p 'Are you sure? (yes)> ' answer
  echo
  if [[ ${answer} == 'yes' ]]; then
    curl ${ETCD_ENDPOINT}/v2/keys/service/${instance_id}\?recursive=true -XDELETE
  fi
}

cmd_status() {
  instance_id=${1:?USAGE: dpg status INSTANCE_ID}

  cluster_path=/service/${instance_id}
  members_path=${cluster_path}/members
  state_path=${cluster_path}/state
  nodes=$(curl -s $ETCD_ENDPOINT/v2/keys${state_path} | jq -r '.node.value' | jq '.nodes')

  echo "Status of cluster '${instance_id}'"
  echo
  (
    echo Member Cell Role State Available
    curl -s $ETCD_ENDPOINT/v2/keys${members_path}\?recursive=true \
      | jq -r '.node.nodes[] | {path: .key, role: .value | fromjson .role, state: .value | fromjson .state, url: .value | fromjson .conn_url } | tojson' \
      | while read member; do

      database_available='false'
      conn=$(echo $member | jq -r '.url')
      if psql $conn -c 'SELECT current_database()' 2>/dev/null | grep '1 row' >/dev/null; then
        database_available='true'
      fi
      member_id=$(basename $(echo $member | jq -r '.path'))
      cell_id=$(echo $nodes | jq -r --arg id ${member_id} '.[] | select(.node_id == $id) .cell_guid')
      if [[ -z ${cell_id} ]]; then
        cell_id='<unknown>'
      fi

      echo ${member_id} ${cell_id} $(echo $member | jq -r '.role') $(echo $member | jq -r '.state') $database_available
    done
  ) | column -t
}

cmd_cells() {
  curl ${BROKER_USERNAME}:${BROKER_PASSWORD}@${BROKER_ENDPOINT}/admin/cells \
    | jq .
}

cmd_raw() {
  local etcd_path=${1}
  local jq_filter=${2}
  if [[ -z ${jq_filter} ]]; then
    jq_filter='.'
  fi

  curl -s $ETCD_ENDPOINT/v2/keys${etcd_path} | jq -r $jq_filter
}

cmd_help() {
	cat >&2 <<EOF
USAGE: dpg <command> [arguments]

Commands:

    dpg target                    Print information about the current target.

    dpg target NAME [--init] [-k] Set or configure the target.
                                  --init will recreate the target settings.
                                  -k will use --skip-ssl-validation when logging
                                  in to Cloud Foundry.

    dpg ls                        List all clusters known to the current target.

    dpg status CLUSTER_ID         Show status information of a given CLUSTER_ID.

    dpg delete CLUSTER_ID         Delete a cluster via the broker api.

    dpg purge CLUSTER_ID          Purge knowladge of a cluster from etcd.

    dpg raw PATH JQ_FILTER        Query etcd PATH and pipe into jq applying the
                                  given JQ_FILTER.
EOF
}

main $@
