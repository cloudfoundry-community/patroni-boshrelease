---
groups:
- name: pipeline
  jobs: [rc, bosh-rc, testflight, bump-image-layers, deploy, shipit, minor, major, patch]
- name: patroni-images
  jobs: [image-patroni-pg95-base, image-patroni-pg95]
- name: ci-image
  jobs: [build-task-image]

jobs:
- name: image-patroni-pg95-base
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: boshrelease}
    - {get: boshrelease-pg95-base-image, trigger: true, params: {submodules: none}}
  - put: docker-image-pg95-patroni-base
    params:
      build: boshrelease/images/postgresql95-patroni-base

- name: image-patroni-pg95
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, resource: boshrelease-pg95-image, trigger: true, params: {submodules: none}}
    - {get: patroni, resource: patched-patroni, trigger: true}
    - {get: docker-image-pg95-patroni-base, trigger: true}
  - task: prepare-dockerfile
    file: boshrelease-ci/ci/tasks/prepare-dockerfile.yml
    config:
      params:
        dockerfile_root: boshrelease/images/postgresql95-patroni
  - put: edge-image
    params:
      build: dockerfile

- name: rc
  public: true
  serial_groups: [version]
  plan:
  - aggregate:
    - {get: boshrelease}
    - {get: edge-image, passed: [image-patroni-pg95], trigger: true}
    - {get: boshrelease-trigger, trigger: true, params: {skip_download: true}}
    - {get: docker-image-registrator, trigger: true, params: {skip_download: true}}
    - {get: version, trigger: true, params: {pre: rc}}
  - put: version
    params: {file: version/number}

- name: bosh-rc
  public: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [rc], trigger: true}
    - {get: edge-image, passed: [rc], trigger: true, params: {save: true}}
    - {get: docker-image-registrator, passed: [rc], trigger: true, params: {save: true}}
    - {get: version, passed: [rc], trigger: true}
  - task: create-candidate-release
    file: boshrelease-ci/ci/tasks/create-candidate-release.yml
    config:
      params:
        aws_access_key_id: {{dingotiles-aws-access}}
        aws_secret_access_key: {{dingotiles-aws-secret}}
  - put: candidate-release
    params: {file: candidate-release/patroni-docker-*.tgz}

- name: testflight
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [bosh-rc], trigger: true}
    - {get: version, passed: [bosh-rc], trigger: true}
    - {get: candidate-release, passed: [bosh-rc], trigger: true}
    - {get: edge-image, passed: [bosh-rc], trigger: true, params: {skip_download: true}}
    - {get: docker-image-registrator, passed: [bosh-rc], trigger: true, params: {skip_download: true}}
    - {get: etcd}
    - {get: remote-syslog}
    - {get: lite-stemcell}
  - task: create-lite-manifest
    file: boshrelease-ci/ci/tasks/create-manifest.yml
    config:
      params:
        deployment_name: patroni-docker-testflight
        bosh_target: {{bosh-lite-target}}
        bosh_username: {{bosh-lite-username}}
        bosh_password: {{bosh-lite-password}}
        bosh_syslog_host: {{bosh-lite-syslog-host}}
        bosh_syslog_port: {{bosh-lite-syslog-port}}
        aws_access_key: {{dingotiles-aws-access}}
        aws_secret_key: {{dingotiles-aws-secret}}
        s3_bucket: {{backups-testflight-s3-bucket}}
        s3_endpoint: {{backups-testflight-s3-endpoint}}
        # docker_image_image: "cfcommunity/postgresql-patroni"
        # docker_image_tag: "9.5"
        docker_image_source: embedded
  - task: delete-testflight
    file: boshrelease-ci/ci/tasks/delete-testflight.yml
    config:
      params:
        deployment_name: patroni-docker-testflight
        bosh_target: {{bosh-lite-target}}
        bosh_username: {{bosh-lite-username}}
        bosh_password: {{bosh-lite-password}}
  - put: lite-deployment
    params:
      manifest: manifest/manifest.yml
      stemcells: [lite-stemcell/*.tgz]
      releases:
        - candidate-release/*.tgz
        - etcd/*.tgz
        - remote-syslog/*.tgz
  - put: lite-errand
    params:
      manifest: manifest/manifest.yml
      errand: sanity-test

- name: bump-image-layers
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [testflight]}
    - {get: edge-image, passed: [testflight], trigger: true, params: {save: true}}
    - {get: docker-image-registrator, passed: [testflight], trigger: true, params: {save: true}}
  - task: bump-image-blob
    file: boshrelease-ci/ci/tasks/bump-image-layers.yml
    config:
      params:
        aws_access_key_id: {{cfcommunity-aws-access}}
        aws_secret_access_key: {{cfcommunity-aws-secret}}
  - aggregate:
    - put: docker-image-pg95-patroni
      params:
        load_base: edge-image
        load_file:       edge-image/image
        load_repository: cfcommunity/postgresql-patroni
        load_tag: edge
    - put: boshrelease
      params: {repository: boshrelease-images-updated, rebase: true}

- name: deploy
  serial: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [testflight]}
    - {get: version, passed: [testflight]}
    - {get: candidate-release, passed: [testflight], trigger: true}
    - {get: etcd}
    - {get: remote-syslog}
    - {get: vsphere-stemcell}
  - put: vsphere-deployment
    params:
      manifest: boshrelease-ci/ci/manifests/vsphere.yml
      stemcells: [vsphere-stemcell/*.tgz]
      releases:
        - candidate-release/*.tgz
        - etcd/*.tgz
        - remote-syslog/*.tgz
  - put: vsphere-errand
    params:
      manifest: boshrelease-ci/ci/manifests/vsphere.yml
      errand: sanity-test

- name: shipit
  serial_groups: [version]
  public: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [bump-image-layers]}
    - {get: candidate-release, passed: [deploy]}
    - {get: version, passed: [deploy], params: {bump: final}}
  - task: create-final-release
    file: boshrelease-ci/ci/tasks/finalize-release.yml
    config:
      params:
        aws_access_key_id: {{cfcommunity-aws-access}}
        aws_secret_access_key: {{cfcommunity-aws-secret}}
  - put: boshrelease
    params:
      repository: final-release-repo
      rebase: true
  - task: create-release-notes
    file: boshrelease-ci/ci/tasks/create-release-notes.yml
  - put: version
    params: {file: version/number}
  - task: generate-commitish
    config:
      platform: linux
      image: docker:///dingotiles/patroni-docker-boshrelease-pipeline
      inputs: [{name: boshrelease}]
      outputs: [{name: generated-commitish}]
      run:
        path: sh
        args:
        - -c
        - |
          git -C boshrelease rev-parse HEAD > generated-commitish/commitish
  - put: github-release
    params:
      name: release-notes/release-name
      tag: release-notes/release-name
      body: release-notes/notes.md
      commitish: generated-commitish/commitish
      globs: [final-release-tarball/*.tgz]

- name: major
  public: true
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major, pre: rc}
  - put: version
    params: {file: version/number}

- name: minor
  public: true
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor, pre: rc}
  - put: version
    params: {file: version/number}

- name: patch
  public: true
  serial_groups: [version]
  plan:
  - get: version
    passed: [shipit]
    trigger: true
    params: {bump: patch, pre: rc}
  - put: version
    params: {file: version/number}

- name: build-task-image
  serial: true
  plan:
  - {get: boshrelease-ci-task, trigger: true}
  - put: docker-image-ci
    params:
      build: boshrelease-ci-task/ci/ci_image

resources:
- name: boshrelease
  type: git
  source:
    uri: git@github.com:dingotiles/patroni-docker-boshrelease.git
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}

- name: github-release
  type: github-release
  source:
    access_token: {{github-release-access-token}}
    user: dingotiles
    repository: patroni-docker-boshrelease

- name: boshrelease-trigger
  type: git
  source:
    uri: git@github.com:dingotiles/patroni-docker-boshrelease.git
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}
    paths: [jobs/*, templates/*, src/*]

- name: boshrelease-ci
  type: git
  source:
    uri: git@github.com:dingotiles/patroni-docker-boshrelease.git
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}

- name: boshrelease-ci-task
  type: git
  source:
    uri: git@github.com:dingotiles/patroni-docker-boshrelease.git
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}
    paths: [ci/ci_image/*]

- name: boshrelease-pg95-image
  type: git
  source:
    uri: git@github.com:dingotiles/patroni-docker-boshrelease.git
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}
    paths: [images/postgresql95-patroni]

- name: boshrelease-pg95-base-image
  type: git
  source:
    uri: git@github.com:dingotiles/patroni-docker-boshrelease.git
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}
    paths: [images/postgresql95-patroni-base]

- name: broker
  type: git
  source:
    uri: git@github.com:dingotiles/patroni-broker.git
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}


- name: version
  type: semver
  source:
    driver: git
    initial_version: 0.0.1
    uri: git@github.com:dingotiles/patroni-docker-boshrelease.git
    branch: version
    file: version
    private_key: {{github-private-key}}

- name: final-release
  type: s3
  source:
    bucket: patroni-docker-releases
    regexp: patroni-docker-(.*).tgz
    access_key_id: {{dingotiles-aws-access}}
    secret_access_key: {{dingotiles-aws-secret}}
    region_name: {{dingotiles-aws-region}}

- name: candidate-release
  type: s3
  source:
    bucket: patroni-docker-release-candidates
    regexp: patroni-docker-(.*).tgz
    access_key_id: {{dingotiles-aws-access}}
    secret_access_key: {{dingotiles-aws-secret}}
    region_name: {{dingotiles-aws-region}}

- name: patched-patroni
  type: git
  source:
    uri: https://github.com/drnic/patroni.git
    branch: connect_address_20150308
    # uri: https://github.com/zalando/patroni.git
    # branch: master
    private_key: {{github-private-key}}

- name: docker-image-pg95-patroni-base
  type: docker-image
  source:
    email: {{docker-hub-email}}
    username: {{docker-hub-username}}
    password: {{docker-hub-password}}
    repository: cfcommunity/postgresql-patroni-base
    tag: "9.5"

- name: docker-image-pg95-patroni
  type: docker-image
  source:
    email: {{docker-hub-email}}
    username: {{docker-hub-username}}
    password: {{docker-hub-password}}
    repository: cfcommunity/postgresql-patroni
    tag: "9.5"

- name: edge-image
  type: docker-image
  source:
    email: {{docker-hub-email}}
    username: {{docker-hub-username}}
    password: {{docker-hub-password}}
    repository: cfcommunity/postgresql-patroni
    tag: "edge"

- name: docker-image-registrator
  type: docker-image
  source:
    email: {{docker-hub-email}}
    username: {{docker-hub-username}}
    password: {{docker-hub-password}}
    repository: cfcommunity/registrator
    tag: "latest"

- name: docker-image-pg95-patroni-master
  type: docker-image
  source:
    email: {{docker-hub-email}}
    username: {{docker-hub-username}}
    password: {{docker-hub-password}}
    repository: cfcommunity/postgresql-patroni
    tag: "9.5-patroni-master"

- name: docker-image-ci
  type: docker-image
  source:
    email: {{docker-hub-email}}
    username: {{docker-hub-username}}
    password: {{docker-hub-password}}
    repository: dingotiles/patroni-docker-boshrelease-pipeline

- name: lite-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent

- name: lite-deployment
  type: bosh-deployment
  source: &lite-defaults
    target: {{bosh-lite-target}}
    username: {{bosh-lite-username}}
    password: {{bosh-lite-password}}
    deployment: patroni-docker-testflight

- name: lite-errand
  type: bosh-errand
  source: *lite-defaults

- name: vsphere-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-vsphere-esxi-ubuntu-trusty-go_agent

- name: vsphere-deployment
  type: bosh-deployment
  source: &vsphere-defaults
    target: {{bosh-vsphere-target}}
    username: {{bosh-vsphere-username}}
    password: {{bosh-vsphere-password}}
    deployment: pg-vsphere

- name: vsphere-errand
  type: bosh-errand
  source: *vsphere-defaults

- name: etcd
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/etcd-release

- name: remote-syslog
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/simple-remote-syslog-boshrelease

resource_types:
- name: bosh-errand
  type: docker-image
  source:
    repository: starkandwayne/bosh-errand-resource
